go test -v
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
ok  	github.com/353solutions/unter	0.003s

unter on  main [!?] via go v1.19.2 
$ go test -run 'TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}'
PASS
ok  	github.com/353solutions/unter	0.003s

unter on  main [!?] via go v1.19.2 
$ go test -v -run 'TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}'
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
PASS
ok  	github.com/353solutions/unter	0.004s

unter on  main [!?] via go v1.19.2 
$ go test -v ./...
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
ok  	github.com/353solutions/unter	0.002s
?   	github.com/353solutions/unter/cache	[no test files]
?   	github.com/353solutions/unter/cmd/httpd	[no test files]
?   	github.com/353solutions/unter/db	[no test files]
?   	github.com/353solutions/unter/logger	[no test files]
unter on  main [!?] via go v1.19.2 
$ go help testflag 
The 'go test' command takes both flags that apply to 'go test' itself
and flags that apply to the resulting test binary.

Several of the flags control profiling and write an execution profile
suitable for "go tool pprof"; run "go tool pprof -h" for more
information. The --alloc_space, --alloc_objects, and --show_bytes
options of pprof control how the information is presented.

The following flags are recognized by the 'go test' command and
control the execution of any test:

	-bench regexp
	    Run only those benchmarks matching a regular expression.
	    By default, no benchmarks are run.
	    To run all benchmarks, use '-bench .' or '-bench=.'.
	    The regular expression is split by unbracketed slash (/)
	    characters into a sequence of regular expressions, and each
	    part of a benchmark's identifier must match the corresponding
	    element in the sequence, if any. Possible parents of matches
	    are run with b.N=1 to identify sub-benchmarks. For example,
	    given -bench=X/Y, top-level benchmarks matching X are run
	    with b.N=1 to find any sub-benchmarks matching Y, which are
	    then run in full.

	-benchtime t
	    Run enough iterations of each benchmark to take t, specified
	    as a time.Duration (for example, -benchtime 1h30s).
	    The default is 1 second (1s).
	    The special syntax Nx means to run the benchmark N times
	    (for example, -benchtime 100x).

	-count n
	    Run each test, benchmark, and fuzz seed n times (default 1).
	    If -cpu is set, run n times for each GOMAXPROCS value.
	    Examples are always run once. -count does not apply to
	    fuzz tests matched by -fuzz.

	-cover
	    Enable coverage analysis.
	    Note that because coverage works by annotating the source
	    code before compilation, compilation and test failures with
	    coverage enabled may report line numbers that don't correspond
	    to the original sources.

	-covermode set,count,atomic
	    Set the mode for coverage analysis for the package[s]
	    being tested. The default is "set" unless -race is enabled,
	    in which case it is "atomic".
	    The values:
		set: bool: does this statement run?
		count: int: how many times does this statement run?
		atomic: int: count, but correct in multithreaded tests;
			significantly more expensive.
	    Sets -cover.

	-coverpkg pattern1,pattern2,pattern3
	    Apply coverage analysis in each test to packages matching the patterns.
	    The default is for each test to analyze only the package being tested.
	    See 'go help packages' for a description of package patterns.
	    Sets -cover.

	-cpu 1,2,4
	    Specify a list of GOMAXPROCS values for which the tests, benchmarks or
	    fuzz tests should be executed. The default is the current value
	    of GOMAXPROCS. -cpu does not apply to fuzz tests matched by -fuzz.

	-failfast
	    Do not start new tests after the first test failure.

	-fuzz regexp
	    Run the fuzz test matching the regular expression. When specified,
	    the command line argument must match exactly one package within the
	    main module, and regexp must match exactly one fuzz test within
	    that package. Fuzzing will occur after tests, benchmarks, seed corpora
	    of other fuzz tests, and examples have completed. See the Fuzzing
	    section of the testing package documentation for details.

	-fuzztime t
	    Run enough iterations of the fuzz target during fuzzing to take t,
	    specified as a time.Duration (for example, -fuzztime 1h30s).
		The default is to run forever.
	    The special syntax Nx means to run the fuzz target N times
	    (for example, -fuzztime 1000x).

	-fuzzminimizetime t
	    Run enough iterations of the fuzz target during each minimization
	    attempt to take t, as specified as a time.Duration (for example,
	    -fuzzminimizetime 30s).
		The default is 60s.
	    The special syntax Nx means to run the fuzz target N times
	    (for example, -fuzzminimizetime 100x).

	-json
	    Log verbose output and test results in JSON. This presents the
	    same information as the -v flag in a machine-readable format.

	-list regexp
	    List tests, benchmarks, fuzz tests, or examples matching the regular
	    expression. No tests, benchmarks, fuzz tests, or examples will be run.
	    This will only list top-level tests. No subtest or subbenchmarks will be
	    shown.

	-parallel n
	    Allow parallel execution of test functions that call t.Parallel, and
	    fuzz targets that call t.Parallel when running the seed corpus.
	    The value of this flag is the maximum number of tests to run
	    simultaneously.
	    While fuzzing, the value of this flag is the maximum number of
	    subprocesses that may call the fuzz function simultaneously, regardless of
	    whether T.Parallel is called.
	    By default, -parallel is set to the value of GOMAXPROCS.
	    Setting -parallel to values higher than GOMAXPROCS may cause degraded
	    performance due to CPU contention, especially when fuzzing.
	    Note that -parallel only applies within a single test binary.
	    The 'go test' command may run tests for different packages
	    in parallel as well, according to the setting of the -p flag
	    (see 'go help build').

	-run regexp
	    Run only those tests, examples, and fuzz tests matching the regular
	    expression. For tests, the regular expression is split by unbracketed
	    slash (/) characters into a sequence of regular expressions, and each
	    part of a test's identifier must match the corresponding element in
	    the sequence, if any. Note that possible parents of matches are
	    run too, so that -run=X/Y matches and runs and reports the result
	    of all tests matching X, even those without sub-tests matching Y,
	    because it must run them to look for those sub-tests.

	-short
	    Tell long-running tests to shorten their run time.
	    It is off by default but set during all.bash so that installing
	    the Go tree can run a sanity check but not spend time running
	    exhaustive tests.

	-shuffle off,on,N
	    Randomize the execution order of tests and benchmarks.
	    It is off by default. If -shuffle is set to on, then it will seed
	    the randomizer using the system clock. If -shuffle is set to an
	    integer N, then N will be used as the seed value. In both cases,
	    the seed will be reported for reproducibility.

	-timeout d
	    If a test binary runs longer than duration d, panic.
	    If d is 0, the timeout is disabled.
	    The default is 10 minutes (10m).

	-v
	    Verbose output: log all tests as they are run. Also print all
	    text from Log and Logf calls even if the test succeeds.

	-vet list
	    Configure the invocation of "go vet" during "go test"
	    to use the comma-separated list of vet checks.
	    If list is empty, "go test" runs "go vet" with a curated list of
	    checks believed to be always worth addressing.
	    If list is "off", "go test" does not run "go vet" at all.

The following flags are also recognized by 'go test' and can be used to
profile the tests during execution:

	-benchmem
	    Print memory allocation statistics for benchmarks.

	-blockprofile block.out
	    Write a goroutine blocking profile to the specified file
	    when all tests are complete.
	    Writes test binary as -c would.

	-blockprofilerate n
	    Control the detail provided in goroutine blocking profiles by
	    calling runtime.SetBlockProfileRate with n.
	    See 'go doc runtime.SetBlockProfileRate'.
	    The profiler aims to sample, on average, one blocking event every
	    n nanoseconds the program spends blocked. By default,
	    if -test.blockprofile is set without this flag, all blocking events
	    are recorded, equivalent to -test.blockprofilerate=1.

	-coverprofile cover.out
	    Write a coverage profile to the file after all tests have passed.
	    Sets -cover.

	-cpuprofile cpu.out
	    Write a CPU profile to the specified file before exiting.
	    Writes test binary as -c would.

	-memprofile mem.out
	    Write an allocation profile to the file after all tests have passed.
	    Writes test binary as -c would.

	-memprofilerate n
	    Enable more precise (and expensive) memory allocation profiles by
	    setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'.
	    To profile all memory allocations, use -test.memprofilerate=1.

	-mutexprofile mutex.out
	    Write a mutex contention profile to the specified file
	    when all tests are complete.
	    Writes test binary as -c would.

	-mutexprofilefraction n
	    Sample 1 in n stack traces of goroutines holding a
	    contended mutex.

	-outputdir directory
	    Place output files from profiling in the specified directory,
	    by default the directory in which "go test" is running.

	-trace trace.out
	    Write an execution trace to the specified file before exiting.

Each of these flags is also recognized with an optional 'test.' prefix,
as in -test.v. When invoking the generated test binary (the result of
'go test -c') directly, however, the prefix is mandatory.

The 'go test' command rewrites or removes recognized flags,
as appropriate, both before and after the optional package list,
before invoking the test binary.

For instance, the command

	go test -v -myflag testdata -cpuprofile=prof.out -x

will compile the test binary and then run it as

	pkg.test -test.v -myflag testdata -test.cpuprofile=prof.out

(The -x flag is removed because it applies only to the go command's
execution, not to the test itself.)

The test flags that generate profiles (other than for coverage) also
leave the test binary in pkg.test for use when analyzing the profiles.

When 'go test' runs a test binary, it does so from within the
corresponding package's source code directory. Depending on the test,
it may be necessary to do the same when invoking a generated test
binary directly. Because that directory may be located within the
module cache, which may be read-only and is verified by checksums, the
test must not write to it or any other directory within the module
unless explicitly requested by the user (such as with the -fuzz flag,
which writes failures to testdata/fuzz).

The command-line package list, if present, must appear before any
flag not known to the go test command. Continuing the example above,
the package list would have to appear before -myflag, but could appear
on either side of -v.

When 'go test' runs in package list mode, 'go test' caches successful
package test results to avoid unnecessary repeated running of tests. To
disable test caching, use any test flag or argument other than the
cacheable flags. The idiomatic way to disable test caching explicitly
is to use -count=1.

To keep an argument for a test binary from being interpreted as a
known flag or a package name, use -args (see 'go help test') which
passes the remainder of the command line through to the test binary
uninterpreted and unaltered.

For instance, the command

	go test -v -args -x -v

will compile the test binary and then run it as

	pkg.test -test.v -x -v

Similarly,

	go test -args math

will compile the test binary and then run it as

	pkg.test math

In the first example, the -x and the second -v are passed through to the
test binary unchanged and with no effect on the go command itself.
In the second example, the argument math is passed through to the test
binary, instead of being interpreted as the package list.

unter on  main [!?] via go v1.19.2 
$go test -cover -v ./...
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
coverage: 23.8% of statements
ok  	github.com/353solutions/unter	0.003s	coverage: 23.8% of statements
?   	github.com/353solutions/unter/cache	[no test files]
?   	github.com/353solutions/unter/cmd/httpd	[no test files]
?   	github.com/353solutions/unter/db	[no test files]
?   	github.com/353solutions/unter/logger	[no test files]

unter on  main [!?] via go v1.19.2 
$ staticcheck ./...

unter on  main [!?] via go v1.19.2 
$ make test
staticcheck ./...
go test -v ./...
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
ok  	github.com/353solutions/unter	(cached)
?   	github.com/353solutions/unter/cache	[no test files]?   	github.com/353solutions/unter/cmd/httpd	[no test files]
?   	github.com/353solutions/unter/db	[no test files]
?   	github.com/353solutions/unter/logger	[no test files]

unter on  main [!?] via go v1.19.2 
$ make install-tools 
go install honnef.co/go/tools/cmd/staticcheck@latest

unter on  main [!?] via go v1.19.2 took 2s 
$ make test
staticcheck ./...
go test -v ./...
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
ok  	github.com/353solutions/unter	(cached)
?   	github.com/353solutions/unter/cache	[no test files]
?   	github.com/353solutions/unter/cmd/httpd	[no test files]
?   	github.com/353solutions/unter/db	[no test files]
?   	github.com/353solutions/unter/logger	[no test files]

unter on  main [!?] via go v1.19.2 
❮ make test
staticcheck ./...unter.go:31:5: var r is unused (U1000)
unter.go:31:28: error parsing regexp: missing closing ]: `[a-` (SA1000)
make: *** [Makefile:5: test] Error 1

unter on  main [!?] via go v1.19.2 
$ go run ./cmd/httpd 
panic: regexp: Compile(`[a-`): error parsing regexp: missing closing ]: `[a-`

goroutine 1 [running]:
regexp.MustCompile({0x74c43a, 0x3})
	/home/miki/sdk/go1.19.2/src/regexp/regexp.go:319 +0xbb
github.com/353solutions/unter.init()
	/home/miki/teaching/practical-go-services/unter/unter.go:31 +0x25
exit status 2

unter on  main [!?] via go v1.19.2 
$ ./_class/run-db.sh 
CREATE TABLE
CREATE INDEX
CREATE INDEX

unter on  main [!?] via go v1.19.2 
$ docker ps
CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS                                       NAMES
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   4 seconds ago   Up 3 seconds   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   hopeful_meitner

unter on  main [!?] via go v1.19.2 
$ ./_class/run-cache.sh 
c298be5b0c4077354feffac0e984ca3d54b96a1e89c17a3a4011a5f3ae63119b

unter on  main [!?] via go v1.19.2 
$docker ps
CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS         PORTS                                       NAMES
c298be5b0c40   redis:7-alpine       "docker-entrypoint.s…"   3 seconds ago    Up 2 seconds   0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   busy_goldstine
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   11 seconds ago   Up 9 seconds   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   hopeful_meitner

unter on  main [!?] via go v1.19.2 
$ git add -u

unter on  main [+] via go v1.19.2 
$ git commit -m 'testing with router'
[main cb7252d] testing with router
 2 files changed, 18 insertions(+), 7 deletions(-)

unter on  main [⇡] via go v1.19.2 
$ git push
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 12 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 718 bytes | 718.00 KiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To github.com:353solutions/srv-2210.git
   f0659a1..cb7252d  main -> main

unter on  main via go v1.19.2 took 7s 
$ git status -u
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
unter on  main via go v1.19.2 
$ git add cmd/main_test.go
fatal: pathspec 'cmd/main_test.go' did not match any files

unter on  main [!] via go v1.19.2 
$ git add cmd/httpd/main_test.go
The following paths are ignored by one of your .gitignore files:
cmd/httpd
hint: Use -f if you really want to add them.
hint: Turn this message off by running
hint: "git config advice.addIgnoredFile false"

unter on  main [!] via go v1.19.2 
$ git add -f cmd/httpd/main_test.go

unter on  main [!+] via go v1.19.2 
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   cmd/httpd/main_test.go

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   cmd/httpd/main.go


unter on  main [!+] via go v1.19.2 
$git ci -m 'main

unter on  main [!+] via go v1.19.2 
$ git add -u

unter on  main [+] via go v1.19.2 
$ git st
## main...origin/main
M  cmd/httpd/main.go
A  cmd/httpd/main_test.go

unter on  main [+] via go v1.19.2 
$ git commit -m 'main test'
[main bc18a62] main test
 2 files changed, 70 insertions(+)
 create mode 100644 cmd/httpd/main_test.go

unter on  main [⇡] via go v1.19.2 
$ git push
Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 12 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 1.08 KiB | 1.08 MiB/s, done.
Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:353solutions/srv-2210.git
   cb7252d..bc18a62  main -> main

unter on  main via go v1.19.2 took 2s 
$ git commit -m 'bad rule' .gitignore 
[main fcabb90] bad rule
 1 file changed, 1 deletion(-)
unter on  main [⇡] via go v1.19.2 
$ git ;push
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
zsh: command not found: push
unter on  main [⇡] via go v1.19.2 
$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 12 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 284 bytes | 284.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:353solutions/srv-2210.git
   bc18a62..fcabb90  main -> main

unter on  main [!] via go v1.19.2 took 2s 
$ go help testflag
The 'go test' command takes both flags that apply to 'go test' itself
and flags that apply to the resulting test binary.

Several of the flags control profiling and write an execution profile
suitable for "go tool pprof"; run "go tool pprof -h" for more
information. The --alloc_space, --alloc_objects, and --show_bytes
options of pprof control how the information is presented.

The following flags are recognized by the 'go test' command and
control the execution of any test:

	-bench regexp
	    Run only those benchmarks matching a regular expression.
	    By default, no benchmarks are run.
	    To run all benchmarks, use '-bench .' or '-bench=.'.
	    The regular expression is split by unbracketed slash (/)
	    characters into a sequence of regular expressions, and each
	    part of a benchmark's identifier must match the corresponding
	    element in the sequence, if any. Possible parents of matches
	    are run with b.N=1 to identify sub-benchmarks. For example,
	    given -bench=X/Y, top-level benchmarks matching X are run
	    with b.N=1 to find any sub-benchmarks matching Y, which are
	    then run in full.

	-benchtime t
	    Run enough iterations of each benchmark to take t, specified
	    as a time.Duration (for example, -benchtime 1h30s).
	    The default is 1 second (1s).
	    The special syntax Nx means to run the benchmark N times
	    (for example, -benchtime 100x).

	-count n
	    Run each test, benchmark, and fuzz seed n times (default 1).
	    If -cpu is set, run n times for each GOMAXPROCS value.
	    Examples are always run once. -count does not apply to
	    fuzz tests matched by -fuzz.

	-cover
	    Enable coverage analysis.
	    Note that because coverage works by annotating the source
	    code before compilation, compilation and test failures with
	    coverage enabled may report line numbers that don't correspond
	    to the original sources.

	-covermode set,count,atomic
	    Set the mode for coverage analysis for the package[s]
	    being tested. The default is "set" unless -race is enabled,
	    in which case it is "atomic".
	    The values:
		set: bool: does this statement run?
		count: int: how many times does this statement run?
		atomic: int: count, but correct in multithreaded tests;
			significantly more expensive.
	    Sets -cover.

	-coverpkg pattern1,pattern2,pattern3
	    Apply coverage analysis in each test to packages matching the patterns.
	    The default is for each test to analyze only the package being tested.
	    See 'go help packages' for a description of package patterns.
	    Sets -cover.

	-cpu 1,2,4
	    Specify a list of GOMAXPROCS values for which the tests, benchmarks or
	    fuzz tests should be executed. The default is the current value
	    of GOMAXPROCS. -cpu does not apply to fuzz tests matched by -fuzz.

	-failfast
	    Do not start new tests after the first test failure.

	-fuzz regexp
	    Run the fuzz test matching the regular expression. When specified,
	    the command line argument must match exactly one package within the
	    main module, and regexp must match exactly one fuzz test within
	    that package. Fuzzing will occur after tests, benchmarks, seed corpora
	    of other fuzz tests, and examples have completed. See the Fuzzing
	    section of the testing package documentation for details.

	-fuzztime t
	    Run enough iterations of the fuzz target during fuzzing to take t,
	    specified as a time.Duration (for example, -fuzztime 1h30s).
		The default is to run forever.
	    The special syntax Nx means to run the fuzz target N times
	    (for example, -fuzztime 1000x).

	-fuzzminimizetime t
	    Run enough iterations of the fuzz target during each minimization
	    attempt to take t, as specified as a time.Duration (for example,
	    -fuzzminimizetime 30s).
		The default is 60s.
	    The special syntax Nx means to run the fuzz target N times
	    (for example, -fuzzminimizetime 100x).

	-json
	    Log verbose output and test results in JSON. This presents the
	    same information as the -v flag in a machine-readable format.

	-list regexp
	    List tests, benchmarks, fuzz tests, or examples matching the regular
	    expression. No tests, benchmarks, fuzz tests, or examples will be run.
	    This will only list top-level tests. No subtest or subbenchmarks will be
	    shown.

	-parallel n
	    Allow parallel execution of test functions that call t.Parallel, and
	    fuzz targets that call t.Parallel when running the seed corpus.
	    The value of this flag is the maximum number of tests to run
	    simultaneously.
	    While fuzzing, the value of this flag is the maximum number of
	    subprocesses that may call the fuzz function simultaneously, regardless of
	    whether T.Parallel is called.
	    By default, -parallel is set to the value of GOMAXPROCS.
	    Setting -parallel to values higher than GOMAXPROCS may cause degraded
	    performance due to CPU contention, especially when fuzzing.
	    Note that -parallel only applies within a single test binary.
	    The 'go test' command may run tests for different packages
	    in parallel as well, according to the setting of the -p flag
	    (see 'go help build').

	-run regexp
	    Run only those tests, examples, and fuzz tests matching the regular
	    expression. For tests, the regular expression is split by unbracketed
	    slash (/) characters into a sequence of regular expressions, and each
	    part of a test's identifier must match the corresponding element in
	    the sequence, if any. Note that possible parents of matches are
	    run too, so that -run=X/Y matches and runs and reports the result
	    of all tests matching X, even those without sub-tests matching Y,
	    because it must run them to look for those sub-tests.

	-short
	    Tell long-running tests to shorten their run time.
	    It is off by default but set during all.bash so that installing
	    the Go tree can run a sanity check but not spend time running
	    exhaustive tests.

	-shuffle off,on,N
	    Randomize the execution order of tests and benchmarks.
	    It is off by default. If -shuffle is set to on, then it will seed
	    the randomizer using the system clock. If -shuffle is set to an
	    integer N, then N will be used as the seed value. In both cases,
	    the seed will be reported for reproducibility.

	-timeout d
	    If a test binary runs longer than duration d, panic.
	    If d is 0, the timeout is disabled.
	    The default is 10 minutes (10m).

	-v
	    Verbose output: log all tests as they are run. Also print all
	    text from Log and Logf calls even if the test succeeds.

	-vet list
	    Configure the invocation of "go vet" during "go test"
	    to use the comma-separated list of vet checks.
	    If list is empty, "go test" runs "go vet" with a curated list of
	    checks believed to be always worth addressing.
	    If list is "off", "go test" does not run "go vet" at all.

The following flags are also recognized by 'go test' and can be used to
profile the tests during execution:

	-benchmem
	    Print memory allocation statistics for benchmarks.

	-blockprofile block.out
	    Write a goroutine blocking profile to the specified file
	    when all tests are complete.
	    Writes test binary as -c would.

	-blockprofilerate n
	    Control the detail provided in goroutine blocking profiles by
	    calling runtime.SetBlockProfileRate with n.
	    See 'go doc runtime.SetBlockProfileRate'.
	    The profiler aims to sample, on average, one blocking event every
	    n nanoseconds the program spends blocked. By default,
	    if -test.blockprofile is set without this flag, all blocking events
	    are recorded, equivalent to -test.blockprofilerate=1.

	-coverprofile cover.out
	    Write a coverage profile to the file after all tests have passed.
	    Sets -cover.

	-cpuprofile cpu.out
	    Write a CPU profile to the specified file before exiting.
	    Writes test binary as -c would.

	-memprofile mem.out
	    Write an allocation profile to the file after all tests have passed.
	    Writes test binary as -c would.

	-memprofilerate n
	    Enable more precise (and expensive) memory allocation profiles by
	    setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'.
	    To profile all memory allocations, use -test.memprofilerate=1.

	-mutexprofile mutex.out
	    Write a mutex contention profile to the specified file
	    when all tests are complete.
	    Writes test binary as -c would.

	-mutexprofilefraction n
	    Sample 1 in n stack traces of goroutines holding a
	    contended mutex.

	-outputdir directory
	    Place output files from profiling in the specified directory,
	    by default the directory in which "go test" is running.

	-trace trace.out
	    Write an execution trace to the specified file before exiting.

Each of these flags is also recognized with an optional 'test.' prefix,
as in -test.v. When invoking the generated test binary (the result of
'go test -c') directly, however, the prefix is mandatory.

The 'go test' command rewrites or removes recognized flags,
as appropriate, both before and after the optional package list,
before invoking the test binary.

For instance, the command

	go test -v -myflag testdata -cpuprofile=prof.out -x

will compile the test binary and then run it as

	pkg.test -test.v -myflag testdata -test.cpuprofile=prof.out

(The -x flag is removed because it applies only to the go command's
execution, not to the test itself.)

The test flags that generate profiles (other than for coverage) also
leave the test binary in pkg.test for use when analyzing the profiles.

When 'go test' runs a test binary, it does so from within the
corresponding package's source code directory. Depending on the test,
it may be necessary to do the same when invoking a generated test
binary directly. Because that directory may be located within the
module cache, which may be read-only and is verified by checksums, the
test must not write to it or any other directory within the module
unless explicitly requested by the user (such as with the -fuzz flag,
which writes failures to testdata/fuzz).

The command-line package list, if present, must appear before any
flag not known to the go test command. Continuing the example above,
the package list would have to appear before -myflag, but could appear
on either side of -v.

When 'go test' runs in package list mode, 'go test' caches successful
package test results to avoid unnecessary repeated running of tests. To
disable test caching, use any test flag or argument other than the
cacheable flags. The idiomatic way to disable test caching explicitly
is to use -count=1.

To keep an argument for a test binary from being interpreted as a
known flag or a package name, use -args (see 'go help test') which
passes the remainder of the command line through to the test binary
uninterpreted and unaltered.

For instance, the command

	go test -v -args -x -v

will compile the test binary and then run it as

	pkg.test -test.v -x -v

Similarly,

	go test -args math

will compile the test binary and then run it as

	pkg.test math

In the first example, the -x and the second -v are passed through to the
test binary unchanged and with no effect on the go command itself.
In the second example, the argument math is passed through to the test
binary, instead of being interpreted as the package list.
unter on  main [!] via go v1.19.2 
$ go test -v ./client 
=== RUN   TestHealth
2022/10/26 22:33:13 trip!
--- PASS: TestHealth (0.00s)
PASS
ok  	github.com/353solutions/unter/client	0.003s

unter on  main [!?] via go v1.19.2 
$ go test -v ./...
=== RUN   TestRideFee
=== RUN   TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750}
=== RUN   TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000}
=== RUN   TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675}
--- PASS: TestRideFee (0.00s)
    --- PASS: TestRideFee/{duration:1000000000_distance:0.1_shared:false_expected:250} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:false_expected:750} (0.00s)
    --- PASS: TestRideFee/{duration:25200000000000_distance:3_shared:false_expected:21000} (0.00s)
    --- PASS: TestRideFee/{duration:180000000000_distance:3_shared:true_expected:675} (0.00s)
PASS
ok  	github.com/353solutions/unter	0.003s
?   	github.com/353solutions/unter/cache	[no test files]
=== RUN   TestHealth
--- PASS: TestHealth (0.00s)
PASS
ok  	github.com/353solutions/unter/client	0.003s
=== RUN   Test_healthHandler
    main_test.go:51: pattern: /
2022/10/26 22:37:18 /health called (rid = 087cc397-3a92-4ec1-a903-f6ee42436453)
2022/10/26 22:37:18 /health ended in 265.474µs (rid = 087cc397-3a92-4ec1-a903-f6ee42436453)
--- PASS: Test_healthHandler (0.01s)
=== RUN   Test_startHandler
--- PASS: Test_startHandler (0.01s)
PASS
ok  	github.com/353solutions/unter/cmd/httpd	0.018s
?   	github.com/353solutions/unter/db	[no test files]
?   	github.com/353solutions/unter/logger	[no test files]
unter on  main [!?] via go v1.19.2 
$ Don't design with interfaces, discover them.
    - Rob Pike
git add cli

unter on  main [!?] via go v1.19.2 
$ git add client

unter on  main [!+] via go v1.19.2 
$ git status -u
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   client/client.go
	new file:   client/client_test.go

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   _class/day-3.log
	modified:   _class/quotes.txt
	modified:   report_test.go


unter on  main [!+] via go v1.19.2 
$ git add -u

unter on  main [+] via go v1.19.2 
$ git commit -m 'mocking http call'
[main 8b0c3cf] mocking http call
 5 files changed, 411 insertions(+), 1 deletion(-)
 create mode 100644 client/client.go
 create mode 100644 client/client_test.go
unter on  main [⇡] via go v1.19.2 
$ git push
Enumerating objects: 14, done.
Counting objects: 100% (14/14), done.
Delta compression using up to 12 threads
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 2.63 KiB | 2.63 MiB/s, done.
Total 9 (delta 5), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (5/5), completed with 5 local objects.
To github.com:353solutions/srv-2210.git
   d5587b3..8b0c3cf  main -> main

unter on  main via go v1.19.2 took 2s 
$ docker ps
CONTAINER ID   IMAGE                COMMAND                  CREATED       STATUS       PORTS                                       NAMES
c298be5b0c40   redis:7-alpine       "docker-entrypoint.s…"   2 hours ago   Up 2 hours   0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   busy_goldstine
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   2 hours ago   Up 2 hours   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   hopeful_meitner

unter on  main via go v1.19.2 
$ docker run -d -P redis:7-alpine
967375e769a9b8164b1b24324ad36050d4e9d532e34315c10b4996c80c1dfe25

unter on  main via go v1.19.2 
$ docker ps
CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS                                         NAMES
967375e769a9   redis:7-alpine       "docker-entrypoint.s…"   3 seconds ago   Up 2 seconds   0.0.0.0:49153->6379/tcp, :::49153->6379/tcp   crazy_solomon
c298be5b0c40   redis:7-alpine       "docker-entrypoint.s…"   2 hours ago     Up 2 hours     0.0.0.0:6379->6379/tcp, :::6379->6379/tcp     busy_goldstine
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   2 hours ago     Up 2 hours     0.0.0.0:5432->5432/tcp, :::5432->5432/tcp     hopeful_meitner
unter on  main via go v1.19.2 
$ docker rm -f 967375e769a9
967375e769a9

unter on  main via go v1.19.2 
$ docker help ps

Usage:  docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all states) (default -1)
  -l, --latest          Show the latest created container (includes all states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes

unter on  main [?] via go v1.19.2 
$ docker ps -f id=68f510fecf9a
CONTAINER ID   IMAGE                COMMAND                  CREATED       STATUS       PORTS                                       NAMES
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   2 hours ago   Up 2 hours   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   hopeful_meitner

unter on  main [?] via go v1.19.2 
$ docker ps -q -f id=68f510fecf9a
68f510fecf9a
unter on  main [?] via go v1.19.2 
❮ docker ps -f id=68f510fecf9a 
CONTAINER ID   IMAGE                COMMAND                  CREATED       STATUS       PORTS                                       NAMES
68f510fecf9a   postgres:15-alpine   "docker-entrypoint.s…"   2 hours ago   Up 2 hours   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   hopeful_meitner

unter on  main [?] via go v1.19.2 
$ docker inspect 68f510fecf9a
[
    {
        "Id": "68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e",
        "Created": "2022-10-26T17:44:12.968459164Z",
        "Path": "docker-entrypoint.sh",
        "Args": [
            "postgres"
        ],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 35621,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2022-10-26T17:44:13.348154067Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:cc994726847f9000a5bb5c7896887ecf1d77b524239f00cd3e19675e0cba2b6f",
        "ResolvConfPath": "/var/lib/docker/containers/68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e/hostname",
        "HostsPath": "/var/lib/docker/containers/68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e/hosts",
        "LogPath": "/var/lib/docker/containers/68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e/68f510fecf9a4dfbc8ea4193068b53aef88769c6818e6ae115e4f584d887443e-json.log",
        "Name": "/hopeful_meitner",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "docker-default",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {
                "5432/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "5432"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "private",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "KernelMemory": 0,
            "KernelMemoryTCP": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": null,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/46ede47c0265fb6433a039fc549aed9769aee393347197a05cea43ea68c5285f-init/diff:/var/lib/docker/overlay2/23bd5b412a88bfa4e4b0da01e613549c8a9af74770616b2bd9f583ebe68d69b9/diff:/var/lib/docker/overlay2/f91d2674563937edd59c337013c987d8c65268d1941870bb5c170227925292c0/diff:/var/lib/docker/overlay2/3cf27f3c5ec4cdceea1693f5932941a380f9aa573f3347d0fd5d91ee51dd90cd/diff:/var/lib/docker/overlay2/381e931756a326a828f64b23de2cb39cc6a357bdb7096265b49ce6107fc02d4a/diff:/var/lib/docker/overlay2/07543e775ebde6c658217accc3802160363518b43d9db0b0d79bd91dc964575b/diff:/var/lib/docker/overlay2/1f3a29f30f38af40f2b14850a45525f48367c3950a91fefa06af2bf1b9f976de/diff:/var/lib/docker/overlay2/d322e56b11da0e3cb9ee2756e57e2367160d176e01a02fb9eb2d07a8f3cd51c1/diff:/var/lib/docker/overlay2/b6b246c57a8132a00d91b20f882b209ef4fae8361f5170f80792f39832067d61/diff",
                "MergedDir": "/var/lib/docker/overlay2/46ede47c0265fb6433a039fc549aed9769aee393347197a05cea43ea68c5285f/merged",
                "UpperDir": "/var/lib/docker/overlay2/46ede47c0265fb6433a039fc549aed9769aee393347197a05cea43ea68c5285f/diff",
                "WorkDir": "/var/lib/docker/overlay2/46ede47c0265fb6433a039fc549aed9769aee393347197a05cea43ea68c5285f/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [
            {
                "Type": "volume",
                "Name": "4d4d26ba51187d74abe2245a505d72799cbcde4f4fdac58e99484cbfa5fc3610",
                "Source": "/var/lib/docker/volumes/4d4d26ba51187d74abe2245a505d72799cbcde4f4fdac58e99484cbfa5fc3610/_data",
                "Destination": "/var/lib/postgresql/data",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }
        ],
        "Config": {
            "Hostname": "68f510fecf9a",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "5432/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "POSTGRES_PASSWORD=s3cr3t",
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "LANG=en_US.utf8",
                "PG_MAJOR=15",
                "PG_VERSION=15.0",
                "PG_SHA256=72ec74f4a7c16e684f43ea42e215497fcd4c55d028a68fb72e99e61ff40da4d6",
                "PGDATA=/var/lib/postgresql/data"
            ],
            "Cmd": [
                "postgres"
            ],
            "Image": "postgres:15-alpine",
            "Volumes": {
                "/var/lib/postgresql/data": {}
            },
            "WorkingDir": "",
            "Entrypoint": [
                "docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {},
            "StopSignal": "SIGINT"
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "73f7d314d6d1004d3a54c566a84d9912e534179a06115599ed7bbe1508171018",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "5432/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "5432"
                    },
                    {
                        "HostIp": "::",
                        "HostPort": "5432"
                    }
                ]
            },
            "SandboxKey": "/var/run/docker/netns/73f7d314d6d1",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "3387162575e421aa9f55aa916e9708e63295b0f9efda7604f8a781b8d1acb0e3",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "d783d2d537ced6293a0dcf17fbe3092a783ed82e14c2669223ec3789eda3b0d6",
                    "EndpointID": "3387162575e421aa9f55aa916e9708e63295b0f9efda7604f8a781b8d1acb0e3",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:11:00:02",
                    "DriverOpts": null
                }
            }
        }
    }
]